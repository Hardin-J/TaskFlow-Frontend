"use client"; // This makes it a Client Component

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "@/app/globals.css";
import { useEffect, useState } from "react";
import toast, { Toaster } from "react-hot-toast";
import { useRouter } from "next/navigation"; // Changed from next/router

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Note: Metadata export needs to be separate in Client Components
const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const [darkMode, setDarkMode] = useState<boolean>(false);

  useEffect(() => {
    // Check for user only on client side
    if (typeof window !== "undefined") {
      const storedUser = localStorage.getItem("user");
      // if (!storedUser) {
      //   toast.error("Please Login first!");
      //   router.push("/login");
      //   return;
      // }

      // Set dark mode based on localStorage or system preference
      const darkModePreference = localStorage.getItem("darkMode");
      if (darkModePreference !== null) {
        setDarkMode(darkModePreference === "true");
      } else {
        setDarkMode(window.matchMedia("(prefers-color-scheme: dark)").matches);
      }
    }
  }, [router]);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Toaster
          position="top-center"
          toastOptions={{
            duration: 4000,
            style: {
              background: darkMode ? '#1e293b' : '#ffffff',
              color: darkMode ? '#f8fafc' : '#0f172a',
              border: darkMode ? '1px solid #334155' : '1px solid #e2e8f0',
            },
            success: {
              iconTheme: {
                primary: '#10b981',
                secondary: 'white',
              },
            },
            error: {
              iconTheme: {
                primary: '#ef4444',
                secondary: 'white',
              },
            },
          }}
        />
        {children}
      </body>
    </html>
  );
}